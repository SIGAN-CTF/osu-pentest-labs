import flask
import logging
import subprocess
import json
from api.models import Lab
from api.datab import SessionLocal, create_db
from interlayer_db import get_all_labs, get_lab
from vagrant import deploy_machine

app = flask.Flask(__name__, template_folder='../frontend/templates')
app.secret_key = "huisukapidorebanyi"
IsLogged = False
create_db()# почему не в models.py


@app.route('/')
def index():
	if IsLogged:
		return flask.render_template('index.html', methods = ['POST', 'GET'])
	else:
		return flask.redirect('/login')

@app.route('/login', methods = ['POST', 'GET'])
def login():
	if flask.request.method == 'POST':
		username = flask.request.form['username']
		password = flask.request.form['password']
		try:
			if username == "admin" and password == "pass":
				IsLogged = True# python global
				return flask.render_template('index.html', methods = ['POST', 'GET'])
			else:
				message = "Неверный логин или пароль"
				return flask.render_template('login.html', methods = ['POST', 'GET'], message = message)
		except Exception:
			logging.exception('')
			return flask.render_template('except.html', methods = ['GET'])
	else:
		return flask.render_template('login.html', methods = ['POST', 'GET'], message = "")

@app.route('/api/list', methods = ['GET'])
def list():
	try:
		with SessionLocal() as db_session:
			labs = get_all_labs(db_session)
			if labs:
				print(json.dumps(labs))#
				return json.dumps(labs)
			else:
				return {"code": "код пустой бд, хз что возвращать"}
	except Exception:
		logging.exception(r"api/list error")
		return {"code":500}


@app.route('/api/run', methods = ['POST'])
def run():
	try:
		with SessionLocal() as db_session:
			lab = get_lab(db_session, flask.request.form["id"])# область видимости?
		if lab:
			deploy_machine(lab)
			return {"id": f"{lab[0]}", "status": f"{lab[2]}"}
		else:
			return {"code": "такого id нет"}
		
	except Exception:
		logging.exception(r'api/run error')
		return {"code":500}

@app.route('/api/destroy', methods = ['POST'])
def destroy():
	try:
		return "asdfgh"
	except Exception:
		logging.exception(r'api/destroy error')
		return {"code":500}

@app.route('/api/restore', methods = ['POST'])
def restore():
	try:
		return "asdfgh"
	except Exception:
		logging.exception(r'api/restore error')
		return {"code":500}


if __name__ == "__main__": app.run(host = "0.0.0.0", port = 1337)