import flask
from api.models import Lab
from api.datab import SessionLocal, create_db
from initdb import init_db
from repository import get_all_labs, get_lab
from vagrant import run_machine, destroy_machine, restart_machine
from flask import Response, request, jsonify
from flask_cors import CORS

app = flask.Flask(__name__, template_folder='../frontend/templates')
app.secret_key = "secret"

CORS(app)

create_db()

with SessionLocal() as db:
    if len(get_all_labs(db)) <= 0:
        init_db()


@app.route('/')
def index():
    return "Hello"


@app.route('/api/labs', methods=['GET'])
def list():
    try:
        with SessionLocal() as db_session:
            labs = get_all_labs(db_session)
            result = []
            for lab in labs:
                result.append({
                    'id': lab.id,
                    'name': lab.name,
                    'status': lab.status,
                    'os': lab.os,
                    'logs': lab.logs,
                })
            return result, 200
    except Exception as e:
        print(e)
        return jsonify({"detail": e}), 400


@app.route('/api/run', methods=['POST'])
def run():
    try:
        with SessionLocal() as db:
            lab_id = request.json.get("id")
            lab = get_lab(db, lab_id)
            if lab:
                lab.status = "Processing"
                db.commit()
                code, stdout, stderr = run_machine(lab.path)
                if code == 0:
                    lab.status = "Running"
                    lab.logs = stdout
                else:
                    lab.status = "Error"
                    lab.log = stdout + stderr
                db.commit()
                return {"id": lab.id, "status": lab.status}, 200
            else:
                return jsonify({"detail": "Id not found"}), 400
    except Exception as e:
        print(e)
        return jsonify({"detail": e}), 400


@app.route('/api/destroy', methods=['POST'])
def destroy():
    try:
        with SessionLocal() as db:
            lab_id = request.json.get("id")
            lab = get_lab(db, lab_id)
            if lab:
                lab.status = "Processing"
                db.commit()
                code, stdout, stderr = destroy_machine(lab.path)
                if code == 0:
                    lab.status = "Not created"
                    lab.logs = stdout
                else:
                    lab.status = "Error"
                    lab.log = stdout + stderr
                db.commit()
                return {"id": lab.id, "status": lab.status}, 200
            else:
                return jsonify({"detail": "Id not found"}), 400
    except Exception as e:
        print(e)
        return jsonify({"detail": e}), 400

@app.route('/api/restart', methods=['POST'])
def restart():
    try:
        with SessionLocal() as db:
            lab_id = request.json.get("id")
            lab = get_lab(db, lab_id)
            if lab:
                lab.status = "Processing"
                db.commit()
                code, stdout, stderr = restart_machine(lab.path)
                if code == 0:
                    lab.status = "Running"
                    lab.logs = stdout
                else:
                    lab.status = "Error"
                    lab.log = stdout + stderr
                db.commit()
                return {"id": lab.id, "status": lab.status}, 200
            else:
                return jsonify({"detail": "Id not found"}), 400
    except Exception as e:
        print(e)
        return jsonify({"detail": e}), 400

@app.route('/api/restore', methods=['POST'])
def restore():
    try:
        return "asdfgh"
    except Exception:
        return {"code": 500}


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=1337)
